#################################################################################################################
#	Steven J. Core ( Sjc1000 )
#									
#	A simple IRC bot											
#################################################################################################################
#	This is just a simple IRC bot that was built for cool IRC things.					
#	It is really my first Python project. So it may not be the best or the nicest.				
#################################################################################################################


############################################# IMPORT ###########################################################
# 	Import all the needed extra's. Python doesn't include them by default. But still has them by default.
import socket
import re
import json
import urllib2
import urllib
import random
import sys
#################################################################################################################


############################################## USER VARIABLES ###################################################
#	Feel free to change all of these, they were put in variables like this so you can easily change them
# 	without having to change raw code.
network     	= 'irc.freenode.net'          	# The network to join to.	
port        	= 6667                         	# The port to join on ( 6667 is default ).

channels     	= [ "Sjc_Bot", "ahkscript" ]  	# The channel to start on.
name        	= "sjBot"                    	# The name to start with.
bot_cmd     	= "!"                        	# The command, so the bot knows its being told to do something.
master      	= "@unaffiliated/sjc1000"    	# The master of the bot ( the one who can use the master commands ).

commandLength	= len( bot_cmd)					# Gets the length of the bot command.
##################################################################################################################


############################################ PROGRAM VARIABLES ###################################################
weapons 		= [
	"a small lion.",
	"an angry mountain.",
	"the power of 3.",
	"a honey badger.",
	"a Hyper beam.",
	"a short drop and a sudden stop.",
	"a spoon, because knives are too easy.",
	"a bowtie.",
	"tlm.",
	"a rraaaiiinnboww trout.",
	"bordem."

]

trusted_channels 	= {
	"#ahk",
	"#ahkscript",
	"#Sjc_Bot",
	"#twdev.net"
}

activation_command 	= {
	"ahk" 			: ">>",
	"Sjc_Bot"		: ">>"
}
##################################################################################################################


############################################ FUNCTIONS #########################################################
#	Initiates all the functions, for later use.

def google_search( query ):
	search 			= query.replace(" ", "+")

	try:
		url				= 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=' + search 
		hdr 			= {'User-Agent': 'Mozilla/5.0'} 
		request 		= urllib2.Request( url, headers=hdr)
		response 		= urllib2.urlopen( request)
	
		html			= response.read()

		output 			= json.loads( html)
		title 			= output['responseData']['results'][0]['titleNoFormatting']
		url 			= output['responseData']['results'][0]['url']
	
		url 			= urllib.unquote( url).encode('utf-8')
		title 			= urllib.unquote( title).encode('utf-8')

		if len( url ) > 20:
			url 		= shortenUrl( url )

		return "\x02" + title + "\x02 - " + url
	except:
		return "\x02\x035No Data found\x02\x03"

#################################################################################################################
# 	http://tiny-url.info/api/v1/create?url=https://www.google.com&provider=clicky_me&apikey=C77889685I98640AA4I
def shortenUrl( url ):
	mUrl 			= "http://tiny-url.info/api/v1/create?url=" +  url + "&provider=clicky_me&apikey=C77889685I98640AA4I&format=json"
	hdr 			= {'User-Agent': 'Mozilla/5.0'} 
	request 		= urllib2.Request( mUrl, headers=hdr)
	response 		= urllib2.urlopen( request)
	
	html			= response.read()
	output 			= json.loads( html)

	reData 			= output['shorturl']

	if reData:
		return reData
	else:
		return url

#################################################################################################################

def is_command( cmd ):
	try:
		check 			= commands[ cmd]
	except:
		return False
	else:
		return True

#################################################################################################################

def func_hello():
    irc.send( b"PRIVMSG " + channel + b" :Hi, " + user + b".\r\n")

#################################################################################################################

def func_g():
	data 			= google_search( full )
	irc.send( b"PRIVMSG " + channel + " :" + data + "\r\n")

#################################################################################################################

def func_ahk():
	query 			= "" +  urllib.quote( full )  + "&cx=009062493091172133168:_o2f4moc9ce"
	data 			= google_search( query )
	irc.send( "PRIVMSG " + channel + " :" + data + "\r\n" )

#################################################################################################################

def func_imdb():
	data 			 	= ""

	try:

		splitparam 		= params[1:].index('|')

		search 			= '+'.join( params[1:splitparam + 1] )
		data 			= ' '.join( params[splitparam + 2:] )


		url				= 'http://www.omdbapi.com/?t=' + search
		hdr 			= {'User-Agent': 'Mozilla/5.0'} 
		request 		= urllib2.Request( url, headers=hdr)
		response 		= urllib2.urlopen( request)
	
		html			= response.read()

		output 			= json.loads( html)

	
		title 			= output['Title']							# &t
		imdbRating		= output['imdbRating']						# &Ir
		year			= output['Year']							# &y
		rated 			= output['Rated']							# &r
		released		= output['Released']						# &Re
		runtime			= output['Runtime']							# &Ru
		genre			= output['Genre']							# &g
		plot 			= output['Plot']							# &p
		link 			= "http://imdb.com/title/" + output["imdbID"]   	# &l

		if data == "":
			data 			= "&t ( &y ) - &r - &l"


		data 				= data.replace("&t", title)
		data 				= data.replace("&Ir", imdbRating)
		data 				= data.replace("&y", year)
		data 				= data.replace("&r", rated)
		data 				= data.replace("&Re", released)
		data 				= data.replace("&Ru", runtime)
		data 				= data.replace("&g", genre)
		data 				= data.replace("&p", plot)
		data 				= data.replace("&l", link)


		irc.send( "PRIVMSG " + channel + " :" + data + "\r\n")
	except:
		irc.send("PRIVMSG " + channel + " :\x02\x035No Data found\x02\x03\r\n")

#################################################################################################################

def func_kill():
	try:
		person 			= params[1]
	except:
		person 			= user



	try:
		weapon 		= "a " + params[2]
	except:
		weapon 		= random.choice( weapons)
	
	if weapon == "a ":
		weapon 		= random.choice( weapons)

	irc.send("PRIVMSG " + channel + " :\x01action Kills " + person + " with " + weapon + "\x01\r\n")

#################################################################################################################

def func_wa():
	try:
		url				= 'http://api.wolframalpha.com/v2/query?input='  +  urllib.quote( full )  + '&appid=9HX9YX-HJHHPWPVK4' 
		hdr 			= {'User-Agent': 'Mozilla/5.0'} 
		request 		= urllib2.Request( url, headers=hdr)
		response 		= urllib2.urlopen( request)
		
		html			= response.read()
		res 			= re.findall('<plaintext>(.*?)</plaintext>', html )
		output 			= "\x02" + res[0] + "\x02 - " + res[1]
		irc.send("PRIVMSG " + channel + " :" + output + "\r\n") 
	except:
		return "\x02\x035No Data found\x02\x03"

#################################################################################################################

def func_ud():
	try:
		search 			= full.replace(" ", "+")
		url 			= "http://urbanscraper.herokuapp.com/define/" + search + ".json"
		hdr 			= {'User-Agent': 'Mozilla/5.0'} 
		request 		= urllib2.Request( url, headers=hdr)
		response 		= urllib2.urlopen( request)
		
		html			= response.read()

		output 			= json.loads( html)

		irc.send( "PRIVMSG " + channel + " :\x02" + output["word"] + "\x02 - " + output["definition"].replace("\n","") + "\r\n")
	except:
		irc.send( "PRIVMSG " + channel + ":\x02\x035No Data found\x02\x03\r\n")

#################################################################################################################

def func_wiki():
	search 				= full.replace(" ", "+")
	result 				= google_search("wiki: " + search)
	irc.send( "PRIVMSG " + channel + " :" + result + "\r\n")

#################################################################################################################

def func_commands():
	try:
		person 			= params[1]
	except:
		person 			= user

	for x in command_list:
		irc.send("PRIVMSG " + person + " :" + x + " - " + command_list[x] + "\r\n")

#################################################################################################################

def master_join():
	if host.find( master) == -1:
		return 1

	for x in params[1:]:
		irc.send( "JOIN " + x + b"\r\n" )
 
#################################################################################################################

def master_leave():
	if host.find( master) == -1:
		return 1

	for x in params[1:]:
		irc.send( b"PART " + x + b"\r\n")

#################################################################################################################

def master_nick():
	if host.find( master) == -1:
		return 1
	
	irc.send( b"NICK " + params[1] + b"\r\n" )


def master_kill():
	sys.exit()
#################################################################################################################


################################################# COMMANDS ######################################################
# 	This is just an array for the commands
# 	The bot will refer to these to check if the command it was given is a function. Then it will call the function.
# 	This also has an array for the description about the command.
commands        = { b"hey"		: func_hello,
                    b"hi"		: func_hello,
					b"g"		: func_g,
					b"ahk"		: func_ahk,
					b"imdb"		: func_imdb,
					b"kill"		: func_kill,
					b"wa"		: func_wa,
					b"ud"		: func_ud,
					b"wiki"		: func_wiki,
					b"commands"	: func_commands,
                    b"join"		: master_join,
                    b"leave"	: master_leave,
					b"nick"		: master_nick,
					b"stop"		: master_kill
                   }
				   
				   
command_list 	= { "hey" 		: "This will make the bot say hello back to the user.",
					"hi" 		: "The same as Hey",
					"g"			: "Searches google for a query",
					"ahk"		: "Searches google for an AHK related query",
					"imdb"		: "Searched imdb for a movie and shows data.",
					"kill"		: "Kills someone with a random or specified weapon.",
					"wa"		: "Searches Wolfram Alpha for something",
					"ud"		: "Searches the Urban Dictionary for something.",
					"wiki"		: "Searches for a wiki article on the search.",
					"commands"	: "Gives a list of commands.",
					"join" 		: " Only usable by the bots master. It will join a channel",
					"leave" 	: " Only usable by the bots master. It will leave a channel",
					"nick" 		: " Only usable by the bots master. It will change the bot's nickname ( only for the current iteration of the bot )",
					"stop"		: " Only usable by the bots master. It will stop the bot."
					}
#################################################################################################################


############################################# IRC STARTUP STUFF #################################################
irc 		= socket.socket ( socket.AF_INET, socket.SOCK_STREAM )						# Initiates the IRC data.
irc.connect( ( network, port ) )														# Then connects to IRC with the network and port variables.

NICK       	= b"NICK " + name + " \r\n"                                     			# Puts the name into a variable with all the IRC stuff around it.
USER        = b"USER " + name + b" " + name + b" " + name + b" :Uptone Software\r\n"	# Does the same for the user.


irc.send( NICK )   																		# Gives the BOT its name.
irc.send( USER )																		# And gives it its credentials.
for x in channels:
	irc.send("JOIN #" + x + "\r\n")														# Then joins the channel[s].

irc.send( "PRIVMSG Nickserv :Identify sjBot sjPass \r\n")
################################################################################################################


############################################ MAIN LOOP #########################################################
#	This is the loop that does everything
#	It gets all the data, puts it into variables, check's if its a command.	                                  
while 1:                									
	
	data 			= irc.recv(1024)
	print( data )

	dt 				= re.match(":(?P<User>.*?)!~?(?P<Host>.*?)\s(?P<Command>.*?)\s(?P<Channel>.*?)\s:(?P<Message>.*)\\r", data)
																		# Regex for all the data from IRC.

	if data[0:4] == "PING":											# If PING is found in the data.
		irc.send("PONG :" + data[6:] + " \r\n")						# Then ping the server back.

	if dt:															# if the main RegEx is a match.
		user 			= dt.group("User")							# puts the user into a variable.
		host 			= dt.group("Host")							# puts the host into the variable.
		command 		= dt.group("Command")						# puts the command into a variable.
		channel 		= dt.group("Channel")						# puts the channel into a variable.
		message 		= dt.group("Message")						# puts the message into the variable.

		if channel == name:
			channel 	= user


		try:
			position		= message.index( bot_cmd )
			bot_command		= message[position:position + commandLength]
			params 			= message[position + commandLength:]
		except: 
			bot_command 	= message[:commandLength] 					# puts the bot command into a variable
			params 			= message[commandLength:]					# trims out the bot command from the params
			
		params				= params.split(" ")							# splits the bot command into params
		full 				= ""										# initiates a variable for later use.


		for value in params[1:]:									
			if full 		== "":
				full 		= value
			else:
				full 		= full + " " + value


		if command == "INVITE":
			for x in trusted_channels:
				if x == message:
					irc.send("JOIN " + message + "\r\n")
			


		if bot_command	== bot_cmd:
			if is_command( params[0].lower() ):
				if commands[ params[0].lower() ]():
					irc.send("PRIVMSG " + channel + ":\x035\x02You are not my master, " + user + "\x02\x03\r\n" )

									
####################################################################################################################


# Thanks for using Uptone Software :) 
############################################## END OF PROGRAM ######################################################
