#################################################################################################################
#	Steven J. Core ( Sjc1000 )
#									
#	A simple IRC bot											
#################################################################################################################
#	This is just a simple IRC bot that was built for cool IRC things.					
#	It is really my first Python project. So it may not be the best or the nicest.				
#################################################################################################################



############################################# IMPORT ###########################################################
# 	Import all the needed extra's. Python doesn't include them by default. But still has them by default.
import socket
import re
import json
import urllib2
import urllib
import random
import sys
#################################################################################################################


############################################## USER VARIABLES ###################################################
#	Feel free to change all of these, they were put in variables like this so you can easily change them
# 	without having to change raw code.
network     	= 'irc.freenode.net'          	# The network to join to.	
port        	= 6667                         	# The port to join on ( 6667 is default ).

botName        	= "sjBot"                    	# The name to start with.
bot_cmd     	= "!"                        	# The command, so the bot knows its being told to do something.
master      	= "@unaffiliated/sjc1000"    	# The master of the bot ( the one who can use the master commands ).

commandLength	= len( bot_cmd)					# Gets the length of the bot command.
password 		= "a1b2c3d4e5"

channelFile		= "channels.txt"

version 		= "2.0"

with open(channelFile) as file:
	content 	= file.readlines()
##################################################################################################################

############################################ PROGRAM VARIABLES ###################################################
weapons 		= [
	"a small lion.",
	"an angry mountain.",
	"the power of 3.",
	"a honey badger.",
	"a Hyper beam.",
	"a short drop and a sudden stop.",
	"a spoon, because knives are too easy.",
	"a bowtie.",
	"tlm.",
	"a rraaaiiinnboww trout.",
	"bordem."

]

trusted_channels 	= [
	"#ahk",
	"#ahkscript",
	"#Sjc_Bot",
	"#twdev.net"
]

apiKeys				= {
	"ahk": "009062493091172133168:_o2f4moc9ce",
	"wolfram": "9HX9YX-HJHHPWPVK4"
}
##################################################################################################################


##################################################################################################################
def google_search( query ):
	search 			= query.replace(" ", "+")

	try:
		url				= 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=' + search 
		hdr 			= {'User-Agent': 'Mozilla/5.0'} 
		request 		= urllib2.Request( url, headers=hdr)
		response 		= urllib2.urlopen( request)

		html			= response.read()

		output 			= json.loads( html)
		title 			= output['responseData']['results'][0]['titleNoFormatting']
		url 			= output['responseData']['results'][0]['url']

		url 			= urllib.unquote( url).encode('utf-8')
		title 			= urllib.unquote( title).encode('utf-8')

		if len( url ) > 20:
			url 		= shortenUrl( url )

		return "\x02" + title + "\x02 - " + url
	except:
		return "\x02\x035No Data found\x02\x03"


# 	http://tiny-url.info/api/v1/create?url=https://www.google.com&provider=clicky_me&apikey=C77889685I98640AA4I
def shortenUrl( url ):
	mUrl 			= "http://tiny-url.info/api/v1/create?url=" +  url + "&provider=clicky_me&apikey=C77889685I98640AA4I&format=json"
	hdr 			= {'User-Agent': 'Mozilla/5.0'} 
	request 		= urllib2.Request( mUrl, headers=hdr)
	response 		= urllib2.urlopen( request)

	html			= response.read()
	output 			= json.loads( html)

	reData 			= output['shorturl']

	if reData:
		return reData
	else:
		return url

def google():
	data 		= google_search(paramData)

	if data == "":
		irc.send("PRIVMSG " + channel + " :NO DATA FOUND\r\n")
	else:
		irc.send("PRIVMSG " + channel + " :" + data + "\r\n")


def math():
	outputData 		= str( eval( paramData ) )
	irc.send("PRIVMSG " + channel + " :\x02" + paramData + "\x02 - " + outputData + "\r\n")


def kill():
	killWho 			= paramData
	killWith 			= random.choice( weapons )

	irc.send("PRIVMSG " + channel + " :\x01action Kills " + killWho + " with " + killWith + "\r\n")

def wolfram():
	url				= 'http://api.wolframalpha.com/v2/query?input='  +  urllib.quote( paramData )  + '&appid=' + apiKeys["wolfram"]
	hdr 			= {'User-Agent': 'Mozilla/5.0'} 
	request 		= urllib2.Request( url, headers=hdr)
	response 		= urllib2.urlopen( request)
	html			= response.read()
	res 			= re.findall('<plaintext>(.*?)</plaintext>', html )
	output 			= "\x02" + res[0] + "\x02 - " + res[1]
	irc.send("PRIVMSG " + channel + " :" + output + "\r\n") 


def imdb():
	url				= 'http://www.omdbapi.com/?t=' + paramData.replace(" ", "+")
	hdr 			= {'User-Agent': 'Mozilla/5.0'} 
	request 		= urllib2.Request( url, headers=hdr)
	response 		= urllib2.urlopen( request)
	html			= response.read()
	output 			= json.loads( html)

	link 			= "http://imdb.com/title/" + output["imdbID"]

	irc.send("PRIVMSG " + channel + " :\x02Found movie: " + output["Title"] + "\x02 - " + link + "\r\n")

def thanks():
	irc.send("PRIVMSG " + channel + " :You're welcome " + user + " :D\r\n")


def join():
	for x in params:
		irc.send("JOIN #" + x + "\r\n")

def leave():
	for x in params:
		irc.send("PART #" + x + "\r\n")

def weather():
	#http://api.openweathermap.org/data/2.5/weather?q=London,uk
	try:
		url				= 'http://api.openweathermap.org/data/2.5/weather?q=' + paramData.replace(" ", "+") + "&units=metric"
		hdr 			= {'User-Agent': 'Mozilla/5.0'} 
		request 		= urllib2.Request( url, headers=hdr)
		response 		= urllib2.urlopen( request)
		html			= response.read()
		output 			= json.loads( html)

		try:
			weather 		= output["weather"][0]["description"]
		except:
			irc.send("PRIVMSG " + channel + " :No weather info found for " + paramData + "\r\n")
			return 0

		windspeed 		= str( output["wind"]["speed"] ) + " KMPH"

		try:
			windgust 		= "a gust of " +str( output["wind"]["gust"] ) + " KMPH"
		except:
			windgust 		= "no gust"

		winddirection 	= output["wind"]["deg"]
		city 			= output["name"]

		if winddirection > 45 and winddirection < 135:
			winddirection	= "coming from the west" 
		if winddirection > 135 and winddirection < 225 :
			winddirection 	= "coming from the north"
		if winddirection > 225 and winddirection < 315 :
			winddirection	= "coming from the east"
		if winddirection > 315 and winddirection < 360 :
			winddirection 	= "coming from the south"

		if city 		== "":
			city 		= output["sys"]["country"]

		temperature 	= output["main"]["temp"]
		humidity		= str( output["main"]["humidity"] ) + "%"

		irc.send("PRIVMSG " + channel + " :The weather in " + city + " : " + weather + ", with a temperature of " + str( temperature ) + " c ( " + str( temperature*9/5+32  ) + " F ) and a humidity of " + humidity  + ". The wind is " + winddirection + " at " + windspeed + " with " +  windgust  +  ".\r\n")
	except:
		irc.send("PRIVMSG " + channel + " :Could not find the weather for " + paramData)


def hug():
	irc.send("PRIVMSG " + channel + " :\x01action Hugs " + user + "\r\n")


def ahk():
	data 		= google_search("autohotkey: " + paramData)
	if data == "":
		irc.send("PRIVMSG " + channel + " :NO DATA FOUND\r\n")
	else:
		irc.send("PRIVMSG " + channel + " :" + data + "\r\n")


def commands():
	commandVar 		= ""

	for x in commandList:
		commandVar 	= commandVar + " | " + x

	irc.send("PRIVMSG " + channel + " :Here is a list of commands: " + commandVar + "\r\n")
##################################################################################################################


##################################################################################################################
commandRegex 		= {
	".*" + bot_cmd + "(g|google|search)\s(?P<Data>.*?)(&{2}|\\r)": "google",
	".*" + bot_cmd + "(expression|math|solve)\s(?P<Data>.*?)(&{2}|\\r)": "math",
	".*" + botName + ".*?(google|search)\s(?!(the\s|)(movie))(?P<Data>.*?)(&{2}|\\r)" : "google",
	".*" + botName + ".*?(math|equation|solve)\s(?P<Data>.*?)(&{2}|\\r)" : "math",
	".*" + bot_cmd + "(kill|k)\s(?P<Data>.*?)(&{2}|\\r)" : "kill",
	".*" + botName + ".*?(kill)\s(?P<Data>.*?)(&{2}|\\r)" : "kill",
	".*" + bot_cmd + "(wolfram|wa)\s(?P<Data>.*?)(&{2}|\\r)" : "wolfram",
	".*" + botName + ".*?(find the|wolfram|what is the)\s(?!(movie|weather))(?P<Data>.*?)(&{2}|\\r)" : "wolfram",
	".*" + bot_cmd + "(imdb|movie)\s(?P<Data>.*?)(&{2}|\\r)" : "imdb",
	".*" + botName + ".*?(movie|imdb)\s(?P<Data>.*?)(&{2}|\\r)" : "imdb",
	".*(?P<Data>(thanks?|fanks?|ty|tah?))\s.*?" + botName.lower() + "" : "thanks",
	".*" + botName + ".*?\s(?P<Data>(thanks?|fanks?|ty|tah?))\s.*" : "thanks",
	".*" + bot_cmd + "(join|j)\s(?P<Data>.*?)(&{2}|\\r)" : "join",
	".*" + bot_cmd + "(leave|l)\s(?P<Data>.*?)(&{2}|\\r)" : "leave",
	".*" + botName + ".*weather\s(like in|in)\s(?P<Data>.*?)(&{2}|\\r)" : "weather",
	".*" + bot_cmd + "(w|weather)\s(?P<Data>.*?)(&{2}|\\r)" : "weather",
	".*" + botName + ".*?(?P<Data>(gimme a hug|hug me|hug)).*?(&{2}|\\r)" : "hug",
	".*(?P<Data>(hug|hug me|gimme a hug)).*" + botName.lower() + ".*?(&{2}|\\r)" : "hug",
	".*" + botName + ".*(search ahk(\sfor)?|ahk search(\sfor)?)\s(?P<Data>.*?)(&{2}|\\r)" : "ahk",
	".*" + bot_cmd + "(ahk|a)\s(?P<Data>.*?)(&{2}|\\r)" : "ahk",
	".*" + botName + ".*?(?P<Data>(can you do|list of commands|command list))(&{2}|\\r)" : "commands",
	".*" + bot_cmd + "(?P<Data>(commands|c)\s?)" : "commands"
}

commandList 	= {
	"math"	: math,
	"google" : google,
	"kill"	: kill,
	"wolfram" : wolfram,
	"imdb" : imdb,
	"thanks" : thanks,
	"join" : join,
	"leave" : leave,
	"weather" : weather,
	"hug" : hug,
	"ahk" : ahk,
	"commands" : commands
}


def callFunction(function):
	commandList[ function]()
##################################################################################################################



################################################## IRC STARTUP ###################################################
irc 				= socket.socket(socket.AF_INET, socket.SOCK_STREAM)
irc.connect((network, port))

NICK 				= "NICK " + botName + " \r\n"
USER 				= "USER " + botName + " " + botName + " " + botName + " :Uptone Software\r\n"

irc.send( NICK )
irc.send( USER )

irc.send("PRIVMSG Nickserv :Identify sjBot sjPass \r\n")

for x in content:
	irc.send("JOIN #" + x + "\r\n")
##################################################################################################################

data 				= 1


while data:
	data 			= irc.recv(1024)
	print( data )
	dt 				= re.match(":(?P<User>.*?)!~?(?P<Host>.*?)\s(?P<Command>.*?)\s(?P<Channel>.*?)\s:(?P<Message>.*\\r)", data)

	if data[0:4] == "PING":											# If PING is found in the data.
		irc.send("PONG :" + data[6:] + " \r\n")	

	if dt:
		user 		= dt.group("User")
		host 		= dt.group("Host")
		command 	= dt.group("Command")
		channel 	= dt.group("Channel")

		message 	= dt.group("Message")


		for x in commandRegex:
			reg 		= re.match(x, message, re.IGNORECASE)
			if reg:
				paramData 	= reg.group("Data")
				params 		= paramData.split(' ')
				print(paramData)
				callFunction(commandRegex[x])

